Running test case 1
1: |bool char short int long float double wchar_t signed unsigned|
Running test case 2
2: |asm auto break case catch class const const_cast continue default delete do dynamic_cast else enum explicit export|
3: |extern false for friend goto if inline mutable namespace new operator private protected public register|
4: |reinterpret_cast return sizeof static static_cast struct switch template this throw true try typedef typeid typename|
5: |union using virtual void volatile while|
Running test case 3
6: |alignas alignof char16_t char32_t constexpr decltype noexcept final nullptr override static_assert thread_local|
Running test case 4
7: |= += -= *= /= %= &= |= ^= <<= >>=|
Running test case 5
8: |+ - * / % ~ & | ^ << >> ++ --|
Running test case 6
9: |! && || == != < > <= >=|
Running test case 7
10: |[] -> . ->* .* ::|
Running test case 8
11: |?: ... , (){}|
Running test case 9
12: |1 2l 3u 4ul 5ll 6ull 2L 3U 4UL 5LL 6ULL|
Running test case 10
13: |01 -07 0x1 0xabcd 0xFEDCBA|
Running test case 11
14: |1.23456e-65 .1E4f 58. 4e2 1.6e-19 6.02e23f 3.14159L|
Running test case 12
15: |"test" "two
lines" L"wide chars"|
16: |"multi\|
17: |line"|
18: |"multiwrap 1st line\|
19: |second line\|
20: |third line"|
21: |""|
Running test case 13
22: |'a''b''
' ' '|
Running test case 14
23: |#define xyz(a) fc(a)|
24: |#define wrap(x) 1st line \|
25: |second line|
26: |#define multiwrap(x) 1st line \|
27: |second line \|
28: |third line|
Running test case 15
29: |//comment|
30: |// comment //|
31: |// wrapped line comment\|
32: |second part of line comment|
33: |/*block comment*/|
34: |///*block comment*/|
35: |/*block comment|
36: |two lines*/|
37: |/*block comment|
38: |three|
39: |lines*/|
40: |/*block comment*/ //line comment|
41: |/**/ //|
42: |/*|
43: |*/|
Running test case 16
44: |1+1|
Running test case 17
45: ||
Tokens checked: 175
Running test case 1
1: |ansichar ansistring array boolean byte bytebool cardinal char comp currency double extended int64|
2: |integer longbool longint longword olevariant pointer rawbytestring real real48 record shortint|
3: |shortstring single smallint string uint64 unicodestring variant widechar widestring word wordbool|
Running test case 2
4: |integer INTEGER Integer iNtEgEr|
Running test case 3
5: |absolute abstract add and as asm assembler at automated case cdecl class const constructor|
6: |contains default deprecated destructor dispid dispinterface div do downto dynamic else|
7: |except export exports external false file final finalization finally for forward function|
8: |goto helper if implementation implements in index inherited initialization inline interface|
9: |is label library local message mod name near nil nodefault not of on operator or out overload|
10: |package packed pascal platform pointermath private procedure program property protected public|
11: |published raise read readonly register reintroduce remove repeat requires resident resourcestring|
12: |result savecall scopedenums sealed set shl shr static stdcall stored strict then threadvar to true|
13: |try type unit unsafe until uses var varargs virtual while with write writeonly xor|
Running test case 4
14: |begin end|
Running test case 5
15: |+ - * / := = <> < <= > >= : ^ @ & , ; . .. ()[]|
Running test case 6
16: |(. .)|
Running test case 7
17: |//comment|
18: |// comment //|
19: |{block comment}|
20: |//{block comment}|
21: |{block comment|
22: |two lines}|
23: |{block comment|
24: |three|
25: |lines}|
26: |{block comment} //line comment|
27: |{} //|
28: |{|
29: |}|
30: |(*alternative comment*)|
Running test case 8
31: |1 $a $12ab34cd -100 $1$2|
Running test case 9
32: |1.23456e-65 .1E4 58. 4e2 1.6e-19 6.02e23 3.14159|
Running test case 10
33: |'test' '''' 'a''b' '''a'''|
Running test case 11
34: |#123 #$ff #1#2|
Running test case 12
35: |1+1|
Running test case 13
36: ||
Tokens checked: 219
Running test case 1
1: |bool boolean int integer float double string array object binary null|
Running test case 2
2: |__halt_compiler abstract and as break callable case catch class clone const|
3: |continue declare default die do echo else elseif empty enddeclare endfor|
4: |endforeach endif endswitch endwhile eval exit extends final for foreach|
5: |function global goto if implements include include_once instanceof insteadof|
6: |interface isset list namespace new or print private protected public require|
7: |require_once return static unset switch throw trait try unset use var while xor|
Running test case 3
8: |= += -= *= /= %= &= |= ^= <<= >>=|
Running test case 4
9: |+ - * / % ~ & | ^ << >> ++ --|
Running test case 5
10: |! && || == != === !== < > <= >=|
Running test case 6
11: |? . , -> => ()[]{}|
Running test case 7
12: |1 200 01 -07 0x1 0xabcd 0xFEDCBA|
Running test case 8
13: |1.23456e-65 .1E4 58. 4e2 1.6e-19 6.02e23 3.14159|
Running test case 9
14: |'single quoted' "double quoted" "two
lines" b"binary string"|
15: |`backticks`|
Running test case 10
16: |$ $a $$b $$$c|
Running test case 11
17: |//comment|
18: |// comment //|
19: |/*block comment*/|
20: |///*block comment*/|
21: |/*block comment|
22: |two lines*/|
23: |/*block comment|
24: |three|
25: |lines*/|
26: |/*block comment*/ //line comment|
27: |/**/ //|
28: |/*|
29: |*/|
30: |#scriptlike comment|
Running test case 12
31: |$a = <<< HTEXT|
32: |Das ist ein langer Text,|
33: |der über mehrere Zeilen geht.|
34: |HTEXT;|
35: |<<<HTEXT|
36: |HTEXT;|
37: |<<<'NOWDOC'|
38: |Nowdoctest|
39: |NOWDOC;|
Running test case 13
40: |1+1|
Running test case 14
41: ||
Tokens checked: 182
Running test case 1
1: |#import define undef ifdef ifndef if defined else|
2: |#elif endif error warning line pragma ident sccs assert unassert|
3: |#include|
4: |#include_next|
Running test case 2
5: |# # ( , ) ## ...|
6: |# + - * / % ! && || & | ^ ~ == != < <= > >= << >>|
Running test case 3
7: |#define MAX 1024|
8: | #define MAX 1024|
9: |# define MAX 1024|
Running test case 4
10: |// #define MAX 1024|
Running test case 5
11: |#define MAX 1024 // any comment|
Running test case 6
12: |#define a 1 //wrap\|
13: |line|
Running test case 7
14: |#define MAX (1<</*shl*/10)/*1024*/|
Running test case 8
15: |#define MAX /* this is|
16: |a multiline comment|
17: |*/ 1024|
Running test case 9
18: |#define MAX\|
19: |1024|
Running test case 10
20: |#  define  MAX	1024	 |
Running test case 11
21: |int a=1;|
22: |int define();|
Running test case 12
23: |"test"|
24: |"multi\|
25: |line"|
26: |"multi\|
27: |line\|
28: |string"|
29: |'c'|
30: |'"'|
Running test case 13
31: |#include "test.h"|
32: |#include <test>|
33: |#include SYSTEM_H|
34: |#define SYSTEM_H <system.h>|
Running test case 14
35: |#define inc(a) a++|
Running test case 15
36: |#define make_list(varname, type, ...) type varname[] = {__VA_ARGS__, (type)-1}|
Running test case 16
37: |#define MK_STRING(string) #string|
Running test case 17
38: |#define CONCAT(a, b) a##b|
Running test case 18
39: |#ifdef MACRO|
40: |#ifndef MACRO|
41: |#endif|
Running test case 19
42: |#if defined(X) || defined(Y)|
Running test case 20
43: |#line 20 "vector"|
Running test case 21
44: |#error "error"|
45: |#warning "warning"|
Running test case 22
46: |<% %> <: :> %:|
Running test case 23
47: |??< ??> ??( ??) ??' ??! ??- ??= ??/ ?? ?|
Running test case 24
48: |#if 1+1|
Running test case 25
49: ||
Tokens checked: 266
Running test case 1
1: |#define A (5+5)|
2: |#if A*2|
Running test case 2
3: |#if 1|
Running test case 3
4: |#if 1+1|
Running test case 4
5: |#if 4-2|
Running test case 5
6: |#if 1+1+3|
Running test case 6
7: |#if 2+2*3|
Running test case 7
8: |#if (2+2)*3|
Running test case 8
9: |#if (2+2)*(3-1)|
Running test case 9
10: |#if (2+2)/(3-1)|
Running test case 10
11: |#if 2<<2|
Running test case 11
12: |#if 7>>2|
Running test case 12
13: |#if 2<<2>>1|
Running test case 13
14: |#if 1&&1|
Running test case 14
15: |#if 0&&1|
Running test case 15
16: |#if 1&&0|
Running test case 16
17: |#if 1&&1&&1|
Running test case 17
18: |#if 1||1|
Running test case 18
19: |#if 1||0|
Running test case 19
20: |#if 0||1|
Running test case 20
21: |#if 0||0|
Running test case 21
22: |#if 0||0||1|
Running test case 22
23: |#if 1&&1||0&&1|
Running test case 23
24: |#if 1&&0||0&&1|
Running test case 24
25: |#if 1||0&&1||0|
Running test case 25
26: |#if !1|
Running test case 26
27: |#if 1&3|
Running test case 27
28: |#if 5&2|
Running test case 28
29: |#if 7&5&3|
Running test case 29
30: |#if 1^3|
Running test case 30
31: |#if 3^3|
Running test case 31
32: |#if 1^2^4|
Running test case 32
33: |#if 3|6|
Running test case 33
34: |#if 15|(15<<4)|
Running test case 34
35: |#if 3&6|1&5|
Running test case 35
36: |#if 5==3+2|
Running test case 36
37: |#if 2*3==3+2|
Running test case 37
38: |#if 2*3==4+2==7-6|
Running test case 38
39: |#if 1!=2|
Running test case 39
40: |#if -2|
Running test case 40
41: |#if -2+-1|
Running test case 41
42: |#if -(2-4)|
Running test case 42
43: |#if 0xa|
Running test case 43
44: |#if 0xFF|
Running test case 44
45: |#if 0xaBcDeF|
Running test case 45
46: |#if 010|
Running test case 46
47: |#if 0xa*0xa|
Running test case 47
48: |#if 'A'|
Running test case 48
49: |#if 'A'+' '|
Running test case 49
50: |#define A 1|
51: |#if A|
Running test case 50
52: |#define A 1|
53: |#if A*2|
Running test case 51
54: |#define A (5+5)|
55: |#if A*2|
Running test case 52
56: |#define A(x) (x*x)|
57: |#if A(4)|
Running test case 53
58: |#define A(x,y) (x*y)|
59: |#if A(2,3)|
Running test case 54
60: |#define A(a,b,c) (a*b*c)|
61: |#if A((1+1),3,(8/2))|
Running test case 55
62: |#define A(a) (a*2)|
63: |#define B(a) (a*3)|
64: |#if A(2)+B(2)|
Running test case 56
65: |#define A 100|
66: |#define B(a) (a*2)|
67: |#if B(A)|
Running test case 57
68: |#define A(a) (a*2)|
69: |#define X 5|
70: |#if A(A(X))|
Running test case 58
71: |#if NOT_DEFINED_MACRO|
Running test case 59
72: |#define A|
73: |#if defined(A)|
Running test case 60
74: |#if !defined(UNDEFINED_MACRO)|
Running test case 61
75: |#if defined(A) && defined B && !defined(((NOT_DEFINED)))|
Running test case 62
76: |#define A 1|
77: |#if A ? 22 : 11|
Running test case 63
78: |#define A 0|
79: |#if A ? 22 : 11|
Running test case 64
80: |#define A 1|
81: |#define B 0|
82: |#if A ? (B ? 11 : 22) : 33|
Tokens checked: 307
Running test case 1
Code: "#define A"
Depth: 1
Code: "#ifdef A"
1: ||
Depth: 2
Code: "ok"
2: ||
Depth: 2
Code: "#endif"
3: |ok|
Depth: 1
4: ||
Running test case 2
Code: "#define A 1"
5: ||
Depth: 1
Code: "#if A==1"
6: ||
Depth: 2
Code: "ok"
7: ||
Depth: 2
Code: "#endif"
8: |ok|
Depth: 1
9: ||
Running test case 3
Code: "#ifndef NOT_DEFINED"
10: ||
Depth: 2
Code: "ok"
11: ||
Depth: 2
Code: "#endif"
12: |ok|
Depth: 1
13: ||
Running test case 4
Code: "#define A"
14: ||
Depth: 1
Code: "#if defined A"
15: ||
Depth: 2
Code: "ok"
16: ||
Depth: 2
Code: "#endif"
17: |ok|
Depth: 1
18: ||
Running test case 5
Code: "#ifdef NOT_DEFINED"
19: ||
Depth: 2
Code: "not ok"
20: ||
Depth: 2
Code: "#else"
21: ||
Depth: 2
Code: "ok"
22: ||
Depth: 2
Code: "#endif"
23: |ok|
Depth: 1
24: ||
Running test case 6
Code: "#if defined(NOT_DEFINED)"
25: ||
Depth: 2
Code: "not ok"
26: ||
Depth: 2
Code: "#else"
27: ||
Depth: 2
Code: "ok"
28: ||
Depth: 2
Code: "#endif"
29: |ok|
Depth: 1
30: ||
Running test case 7
Code: "#if defined(NOT_DEFINED)"
31: ||
Depth: 2
Code: "#define B"
32: ||
Depth: 2
Code: "#endif"
33: ||
Depth: 1
Code: "#ifndef B"
34: ||
Depth: 2
Code: "ok"
35: ||
Depth: 2
Code: "#endif"
36: |ok|
Depth: 1
37: ||
Running test case 8
Code: "#define B"
38: ||
Depth: 1
Code: "#undef B"
39: ||
Depth: 1
Code: "#ifndef B"
40: ||
Depth: 2
Code: "ok"
41: ||
Depth: 2
Code: "#endif"
42: |ok|
Depth: 1
43: ||
Running test case 9
Code: "#define A"
44: ||
Depth: 1
Code: "#define B"
45: ||
Depth: 1
Code: "#ifdef A"
46: ||
Depth: 2
Code: "#ifdef B"
47: ||
Depth: 3
Code: "ok"
48: ||
Depth: 3
Code: "#endif"
49: |ok|
Depth: 2
Code: "#endif"
50: ||
Depth: 1
51: ||
Running test case 10
Code: "#define A"
52: ||
Depth: 1
Code: "#ifdef A"
53: ||
Depth: 2
Code: "#ifdef B"
54: ||
Depth: 3
Code: "not ok"
55: ||
Depth: 3
Code: "#else"
56: ||
Depth: 3
Code: "ok"
57: ||
Depth: 3
Code: "#endif"
58: |ok|
Depth: 2
Code: "#endif"
59: ||
Depth: 1
60: ||
Running test case 11
Code: "#define A"
61: ||
Depth: 1
Code: "#if defined(A)"
62: ||
Depth: 2
Code: "ok"
63: ||
Depth: 2
Code: "#elif B"
64: |ok|
Depth: 2
Code: "not ok"
65: ||
Depth: 2
Code: "#else"
66: ||
Depth: 2
Code: "not ok"
67: ||
Depth: 2
Code: "#endif"
68: ||
Depth: 1
69: ||
Running test case 12
Code: "#define A 3"
70: ||
Depth: 1
Code: "#if A==1"
71: ||
Depth: 2
Code: "not ok"
72: ||
Depth: 2
Code: "#elif A==2"
73: ||
Depth: 2
Code: "not ok"
74: ||
Depth: 2
Code: "#elif A==3"
75: ||
Depth: 2
Code: "ok"
76: ||
Depth: 2
Code: "#else"
77: |ok|
Depth: 2
Code: "not ok"
78: ||
Depth: 2
Code: "#endif"
79: ||
Depth: 1
80: ||
Running test case 13
Code: "#define A"
81: ||
Depth: 1
Code: "#define B"
82: ||
Depth: 1
Code: "#ifdef A"
83: ||
Depth: 2
Code: "# ifndef B"
84: ||
Depth: 3
Code: "not ok"
85: | |
Depth: 3
Code: "# else"
86: ||
Depth: 3
Code: "ok"
87: ||
Depth: 3
Code: "# endif"
88: |ok|
Depth: 2
Code: "#else"
89: | |
Depth: 2
Code: "not ok"
90: ||
Depth: 2
Code: "#endif"
91: ||
Depth: 1
92: ||
Running test case 14
Code: "#ifndef A"
93: ||
Depth: 2
Code: "#define A 1"
94: ||
Depth: 2
Code: "#endif"
95: ||
Depth: 1
Code: "#ifdef A"
96: ||
Depth: 2
Code: "#undef A"
97: ||
Depth: 2
Code: "#define A 2"
98: ||
Depth: 2
Code: "#endif"
99: ||
Depth: 1
Code: "#if A==2"
100: ||
Depth: 2
Code: "ok"
101: ||
Depth: 2
Code: "#endif"
102: |ok|
Depth: 1
103: ||
Running test case 15
Code: "#define A ok"
104: ||
Depth: 1
Code: "A;"
105: ||
Depth: 1
106: |ok;|
Running test case 16
Code: "#define A(x,y) x##y"
107: ||
Depth: 1
Code: "A(o,k);"
108: ||
Depth: 1
109: |ok;|
Running test case 17
Code: "#define A(x) #x"
110: ||
Depth: 1
Code: "A(ok);"
111: ||
Depth: 1
112: |"ok";|
Running test case 18
Code: ">test.h"
Depth: 1
Code: "#include "test.h""
113: ||
114: | |
115: ||
116: ||
117: |ok|
118: ||
Depth: 1
Code: "-test.h"
Depth: 1
119: ||
Running test case 19
Code: ">test.h"
Depth: 1
Code: "#include "test.h""
120: ||
121: | |
122: ||
123: ||
124: |ok|
125: ||
Depth: 1
Code: "#include "test.h""
126: ||
127: | |
128: ||
129: ||
130: ||
131: ||
Depth: 1
Code: "-test.h"
Depth: 1
132: ||
Running test case 20
Code: ">test.h"
Depth: 1
Code: ">test2.h"
Depth: 1
Code: "#include "test2.h""
133: ||
134: | |
135: | |
136: ||
137: ||
138: |ok|
139: ||
140: ||
Depth: 1
Code: "#ifdef TEST_H"
141: ||
Depth: 2
Code: "ok"
142: ||
Depth: 2
Code: "#endif"
143: |ok|
Depth: 1
Code: "-test.h"
Depth: 1
Code: "-test2.h"
Depth: 1
144: ||
Running test case 21
Code: "__LINE__;"
145: ||
Depth: 1
Code: "__LINE__;"
146: |1;|
Depth: 1
147: |2;|
Running test case 22
Code: ">test.h"
Depth: 1
Code: "#include "test.h""
148: ||
149: | |
150: |"test.h";|
Depth: 1
Code: "-test.h"
Depth: 1
151: ||
Running test case 23
Code: ">test.h"
Depth: 1
Code: "#include "test.h""
152: ||
153: | |
154: ||
155: ||
156: ||
157: |4;|
158: ||
Depth: 1
Code: "__LINE__;"
159: ||
Depth: 1
Code: "-test.h"
Depth: 1
160: |2;|
Tokens checked: 34
0 of 157 tests failed!
