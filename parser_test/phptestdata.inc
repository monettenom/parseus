
tTestData sPhpTestData[] = 
{
  // types
  {
    {"bool boolean int integer float double string array object binary null", NULL},
    11,
    true,
    {""},
    {TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, -1},
    {PHP_KW_CAST_BOOL, PHP_KW_CAST_BOOLEAN, PHP_KW_CAST_INT, PHP_KW_CAST_INTEGER, PHP_KW_CAST_FLOAT, 
     PHP_KW_CAST_DOUBLE, PHP_KW_CAST_STRING, PHP_KW_CAST_ARRAY, PHP_KW_CAST_OBJECT, PHP_KW_CAST_BINARY, PHP_KW_NULL}
  },
  // keywords
  {
    {"__halt_compiler abstract and as break callable case catch class clone const",
     "continue declare default die do echo else elseif empty enddeclare endfor",
     "endforeach endif endswitch endwhile eval exit extends final for foreach",
     "function global goto if implements include include_once instanceof insteadof",
     "interface isset list namespace new or print private protected public require",
     "require_once return static unset switch throw trait try unset use var while xor",
     NULL},
    65,
    true,
    {""},
    {TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, 
     TOKEN_KEYWORD, TOKEN_KEYWORD, -1},
    {PHP_KW_HALT_COMPILER, PHP_KW_ABSTRACT, PHP_KW_AND, PHP_KW_AS, PHP_KW_BREAK,
     PHP_KW_CALLABLE, PHP_KW_CASE, PHP_KW_CATCH, PHP_KW_CLASS, PHP_KW_CLONE,
     PHP_KW_CONST, PHP_KW_CONTINUE, PHP_KW_DECLARE, PHP_KW_DEFAULT, PHP_KW_DIE,
     PHP_KW_DO, PHP_KW_ECHO, PHP_KW_ELSE, PHP_KW_ELSEIF, PHP_KW_EMPTY, PHP_KW_ENDDECLARE,
     PHP_KW_ENDFOR, PHP_KW_ENDFOREACH, PHP_KW_ENDIF, PHP_KW_ENDSWITCH, PHP_KW_ENDWHILE,
     PHP_KW_EVAL, PHP_KW_EXIT, PHP_KW_EXTENDS, PHP_KW_FINAL, PHP_KW_FOR, PHP_KW_FOREACH,
     PHP_KW_FUNCTION, PHP_KW_GLOBAL, PHP_KW_GOTO, PHP_KW_IF, PHP_KW_IMPLEMENTS,
     PHP_KW_INCLUDE, PHP_KW_INCLUDE_ONCE, PHP_KW_INSTANCEOF, PHP_KW_INSTEADOF, PHP_KW_INTERFACE,
     PHP_KW_ISSET, PHP_KW_LIST, PHP_KW_NAMESPACE, PHP_KW_NEW, PHP_KW_OR, PHP_KW_PRINT,
     PHP_KW_PRIVATE, PHP_KW_PROTECTED, PHP_KW_PUBLIC, PHP_KW_REQUIRE, PHP_KW_REQUIRE_ONCE,
     PHP_KW_RETURN, PHP_KW_STATIC, PHP_KW_UNSET, PHP_KW_SWITCH, PHP_KW_THROW, PHP_KW_TRAIT,
     PHP_KW_TRY, PHP_KW_UNSET, PHP_KW_USE, PHP_KW_VAR, PHP_KW_WHILE, PHP_KW_XOR}
  },
  // assignment operators
  {
    {"= += -= *= /= %= &= |= ^= <<= >>=", NULL},
    11,
    true,
    {""},
    {TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR,
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR},
    {PHP_OP_ASSIGNMENT, PHP_OP_SUM_ASSIGNMENT, PHP_OP_DIFFERENCE_ASSIGNMENT, PHP_OP_PRODUCT_ASSIGNMENT, 
     PHP_OP_QUOTIENT_ASSIGNMENT, PHP_OP_MODULUS_ASSIGNMENT, PHP_OP_AND_ASSIGNMENT, 
     PHP_OP_OR_ASSIGNMENT, PHP_OP_XOR_ASSIGNMENT, PHP_OP_SHIFT_LEFT_ASSIGNMENT, PHP_OP_SHIFT_RIGHT_ASSIGNMENT
    }
  },
  // arithmetic operators
  {
    {"+ - * / % ~ & | ^ << >> ++ --", NULL},
    13,
    true,
    {""},
    {TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR,
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, 
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR},
    {PHP_OP_ADDITION, PHP_OP_SUBTRACTION, PHP_OP_MULTIPLICATION, PHP_OP_DIVISION, 
    PHP_OP_MODULUS, PHP_OP_COMPLEMENT, PHP_OP_AMPERSAND, PHP_OP_BITWISE_OR, PHP_OP_BITWISE_XOR, 
    PHP_OP_SHIFT_LEFT, PHP_OP_SHIFT_RIGHT, PHP_OP_INCREMENT, PHP_OP_DECREMENT}
  },
  // logical and comparison operators
  {
    {"! && || == != === !== < > <= >=", NULL},
    11,
    true,
    {""},
    {TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR,
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR},
    {PHP_OP_LOGICAL_NOT, PHP_OP_LOGICAL_AND, PHP_OP_LOGICAL_OR, PHP_OP_EQUAL, PHP_OP_NOT_EQUAL,
     PHP_OP_IDENTICAL, PHP_OP_NOT_IDENTICAL, PHP_OP_SMALLER, PHP_OP_BIGGER, PHP_OP_SMALLER_OR_EQUAL, 
     PHP_OP_BIGGER_OR_EQUAL}
  },
  // misc operators
  {
    {"? . , -> => ()[]{}", NULL},
    11,
    true,
    {""},
    {TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR,
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_BLOCK_BEGIN, TOKEN_BLOCK_END, -1},
    {PHP_OP_CONDITIONAL, PHP_OP_MEMBER_ACCESS, PHP_OP_LIST, PHP_OP_POINTER, PHP_OP_ASSOCIATION,
     PHP_OP_BRACKET_OPEN, PHP_OP_BRACKET_CLOSE, PHP_OP_INDEX_OPEN, PHP_OP_INDEX_CLOSE, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, }
  },
  // numeric literals
  {
    {"1 200 01 -07 0x1 0xabcd 0xFEDCBA", NULL}, 
    8,
    true,
    {"1", "200", "01", "", "07", "0x1", "0xabcd", "0xFEDCBA"},
    {TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_OPERATOR, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, -1},
    {PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_SUBTRACTION, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN}
  },
  // floating point numbers
  {
    {"1.23456e-65 .1E4f 58. 4e2 1.6e-19 6.02e23f 3.14159", NULL}, 
    7,
    true,
    {"1.23456e-65", ".1E4f", "58.", "4e2", "1.6e-19", "6.02e23f", "3.14159"},
    {TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL},
    {PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN}
  },
  // string literals
  {
    {"'single quoted' \"double quoted\" \"two\nlines\" b\"binary string\"",
     "`backticks`",
     NULL},
    5,
    true,
    {"'single quoted'", "\"double quoted\"", "\"two\nlines\"", "b\"binary string\"",
     "`backticks`"},
    {TOKEN_STRING, TOKEN_STRING, TOKEN_STRING, TOKEN_STRING, TOKEN_STRING, -1},
    {PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN}
  },
  // variables
  {
    {"$ $a $$b $$$c", NULL},
    10,
    true,
    {"", "", "a", "", "", "b", "", "", "", "c"},
    {TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_LABEL, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_LABEL, 
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_LABEL},
    {PHP_OP_VARIABLE, PHP_OP_VARIABLE, PHP_OP_UNKNOWN, PHP_OP_VARIABLE, PHP_OP_VARIABLE, PHP_OP_UNKNOWN,
     PHP_OP_VARIABLE, PHP_OP_VARIABLE, PHP_OP_VARIABLE, PHP_OP_UNKNOWN}
  },
  // Comments
  {
    {"//comment",
     "// comment //",
     "/*block comment*/",
     "///*block comment*/",
     "/*block comment",
     "two lines*/",
     "/*block comment",
     "three",
     "lines*/",
     "/*block comment*/ //line comment",
     "/**/ //", "/*", "*/",
     "#scriptlike comment",
     NULL},
    12,
    true,
    {"comment", " comment //", "block comment", "/*block comment*/", "block comment\ntwo lines",
     "block comment\nthree\nlines", "block comment", "line comment", "", "", "\n", "scriptlike comment"},
    {TOKEN_LINECOMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_COMMENT,
     TOKEN_COMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_LINECOMMENT},
    {PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, 
     PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN, PHP_OP_UNKNOWN}
  },
  // stopping entry
  {
    {NULL}, -1, false, {""}, {-1}, {-1}
  }
};
