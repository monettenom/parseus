tTestData sPasTestData[] = 
{
  // types
  {
    {"ansichar ansistring array boolean byte bytebool cardinal char comp currency double extended int64",
     "integer longbool longint longword olevariant pointer rawbytestring real real48 record shortint",
     "shortstring single smallint string uint64 unicodestring variant widechar widestring word wordbool",
     NULL},
    35,
    true,
    {""},
    {TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, -1},
    {PAS_KW_TYPE_ANSICHAR, PAS_KW_TYPE_ANSISTRING, PAS_KW_TYPE_ARRAY, PAS_KW_TYPE_BOOLEAN, PAS_KW_TYPE_BYTE, 
     PAS_KW_TYPE_BYTEBOOL, PAS_KW_TYPE_CARDINAL, PAS_KW_TYPE_CHAR, PAS_KW_TYPE_COMP, PAS_KW_TYPE_CURRENCY,
     PAS_KW_TYPE_DOUBLE, PAS_KW_TYPE_EXTENDED, PAS_KW_TYPE_INT64, PAS_KW_TYPE_INTEGER, PAS_KW_TYPE_LONGBOOL,
     PAS_KW_TYPE_LONGINT, PAS_KW_TYPE_LONGWORD, PAS_KW_TYPE_OLEVARIANT, PAS_KW_TYPE_POINTER, PAS_KW_TYPE_RAWBYTESTRING,
     PAS_KW_TYPE_REAL, PAS_KW_TYPE_REAL48, PAS_KW_TYPE_RECORD, PAS_KW_TYPE_SHORTINT, PAS_KW_TYPE_SHORTSTRING,
     PAS_KW_TYPE_SINGLE, PAS_KW_TYPE_SMALLINT, PAS_KW_TYPE_STRING, PAS_KW_TYPE_UINT64, PAS_KW_TYPE_UNICODESTRING,
     PAS_KW_TYPE_VARIANT, PAS_KW_TYPE_WIDECHAR, PAS_KW_TYPE_WIDESTRING, PAS_KW_TYPE_WORD, PAS_KW_TYPE_WORDBOOL}
  },
  // case insensitivity
  {
    {"integer INTEGER Integer iNtEgEr", NULL},
    4,
    true,
    {""},
    {TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD},
    {PAS_KW_TYPE_INTEGER, PAS_KW_TYPE_INTEGER, PAS_KW_TYPE_INTEGER, PAS_KW_TYPE_INTEGER}
  },
  // keywords
  {
    {"absolute abstract add and as asm assembler at automated case cdecl class const constructor",
     "contains default deprecated destructor dispid dispinterface div do downto dynamic else",
     "except export exports external false file final finalization finally for forward function",
     "goto helper if implementation implements in index inherited initialization inline interface",
     "is label library local message mod name near nil nodefault not of on operator or out overload",
     "package packed pascal platform pointermath private procedure program property protected public",
     "published raise read readonly register reintroduce remove repeat requires resident resourcestring",
     "result savecall scopedenums sealed set shl shr static stdcall stored strict then threadvar to true",
     "try type unit unsafe until uses var varargs virtual while with write writeonly xor",
     NULL},
    116,
    true,
    {""},
    {TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD,
     TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, TOKEN_KEYWORD, -1},
    {PAS_KW_ABSOLUTE, PAS_KW_ABSTRACT, PAS_KW_ADD, PAS_KW_AND, PAS_KW_AS, PAS_KW_ASM, PAS_KW_ASSEMBLER, PAS_KW_AT,
     PAS_KW_AUTOMATED, PAS_KW_CASE, PAS_KW_CDECL, PAS_KW_CLASS, PAS_KW_CONST, PAS_KW_CONSTRUCTOR, PAS_KW_CONTAINS,
     PAS_KW_DEFAULT, PAS_KW_DEPRECATED, PAS_KW_DESTRUCTOR, PAS_KW_DISPID, PAS_KW_DISPINTERFACE, PAS_KW_DIV, PAS_KW_DO,
     PAS_KW_DOWNTO, PAS_KW_DYNAMIC, PAS_KW_ELSE, PAS_KW_EXCEPT, PAS_KW_EXPORT, PAS_KW_EXPORTS, PAS_KW_EXTERNAL,
     PAS_KW_FALSE, PAS_KW_FILE, PAS_KW_FINAL, PAS_KW_FINALIZATION, PAS_KW_FINALLY, PAS_KW_FOR, PAS_KW_FORWARD,
     PAS_KW_FUNCTION, PAS_KW_GOTO, PAS_KW_HELPER, PAS_KW_IF, PAS_KW_IMPLEMENTATION, PAS_KW_IMPLEMENTS, PAS_KW_IN,
     PAS_KW_INDEX, PAS_KW_INHERITED, PAS_KW_INITIALIZATION, PAS_KW_INLINE, PAS_KW_INTERFACE, PAS_KW_IS, PAS_KW_LABEL,
     PAS_KW_LIBRARY, PAS_KW_LOCAL, PAS_KW_MESSAGE, PAS_KW_MOD, PAS_KW_NAME, PAS_KW_NEAR, PAS_KW_NIL, PAS_KW_NODEFAULT,
     PAS_KW_NOT, PAS_KW_OF, PAS_KW_ON, PAS_KW_OPERATOR, PAS_KW_OR, PAS_KW_OUT, PAS_KW_OVERLOAD, PAS_KW_PACKAGE,
     PAS_KW_PACKED, PAS_KW_PASCAL, PAS_KW_PLATFORM, PAS_KW_POINTERMATH, PAS_KW_PRIVATE, PAS_KW_PROCEDURE, PAS_KW_PROGRAM,
     PAS_KW_PROPERTY, PAS_KW_PROTECTED, PAS_KW_PUBLIC, PAS_KW_PUBLISHED, PAS_KW_RAISE, PAS_KW_READ, PAS_KW_READONLY,
     PAS_KW_REGISTER, PAS_KW_REINTRODUCE, PAS_KW_REMOVE, PAS_KW_REPEAT, PAS_KW_REQUIRES, PAS_KW_RESIDENT,
     PAS_KW_RESOURCESTRING, PAS_KW_RESULT, PAS_KW_SAFECALL, PAS_KW_SCOPEDENUMS, PAS_KW_SEALED, PAS_KW_SET, PAS_KW_SHL,
     PAS_KW_SHR, PAS_KW_STATIC, PAS_KW_STDCALL, PAS_KW_STORED, PAS_KW_STRICT, PAS_KW_THEN, PAS_KW_THREADVAR, PAS_KW_TO,
     PAS_KW_TRUE, PAS_KW_TRY, PAS_KW_TYPE, PAS_KW_UNIT, PAS_KW_UNSAFE, PAS_KW_UNTIL, PAS_KW_USES, PAS_KW_VAR,
     PAS_KW_VARARGS, PAS_KW_VIRTUAL, PAS_KW_WHILE, PAS_KW_WITH, PAS_KW_WRITE, PAS_KW_WRITEONLY, PAS_KW_XOR
     }
  },
  // special tokens
  {
    {"begin end",
     NULL},
    2,
    true,
    {""},
    {TOKEN_BLOCK_BEGIN, TOKEN_BLOCK_END, -1},
    {PAS_KW_UNKNOWN, PAS_KW_UNKNOWN}
  },
  // operators
  {
    {"+ - * / := = <> < <= > >= : ^ @ & , ; . .. ()[]",
     NULL},
    23,
    true,
    {""},
    {TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR,
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR,
     TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR,
     TOKEN_OPERATOR, TOKEN_OPERATOR,
     -1},
    {PAS_OP_ADDITION, PAS_OP_SUBTRACTION, PAS_OP_MULTIPLICATION, PAS_OP_DIVISION, PAS_OP_ASSIGNMENT, PAS_OP_EQUAL, 
     PAS_OP_NOT_EQUAL, PAS_OP_SMALLER, PAS_OP_SMALLER_OR_EQUAL, PAS_OP_BIGGER, PAS_OP_BIGGER_OR_EQUAL, PAS_OP_ISTYPE,
     PAS_OP_DEREFERENCE, PAS_OP_ADDRESS, PAS_OP_AMPERSAND, PAS_OP_LIST, PAS_OP_COMMAND_SEPARATOR, PAS_OP_MEMBER_ACCESS, 
     PAS_OP_RANGE, PAS_OP_BRACKET_OPEN, PAS_OP_BRACKET_CLOSE, PAS_OP_INDEX_OPEN, PAS_OP_INDEX_CLOSE}
  },
  // alternative operators
  {
    {"(. .)", // (* *),
     NULL},
    2,
    true,
    {""},
    {TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, TOKEN_OPERATOR, -1},
    {PAS_OP_INDEX_OPEN, PAS_OP_INDEX_CLOSE}
  },
  // Comments
  {
    {"//comment",
     "// comment //",
     "{block comment}",
     "//{block comment}",
     "{block comment",
     "two lines}",
     "{block comment",
     "three",
     "lines}",
     "{block comment} //line comment",
     "{} //", "{", "}",
     "(*alternative comment*)",
     NULL},
    12,
    true,
    {"comment", " comment //", "block comment", "{block comment}", "block comment\ntwo lines",
     "block comment\nthree\nlines", "block comment", "line comment", "", "", "\n",
     "alternative comment"},
    {TOKEN_LINECOMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_COMMENT,
     TOKEN_COMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_LINECOMMENT, TOKEN_COMMENT, TOKEN_COMMENT},
    {PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, 
     PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN}
  },
  // numeric literals
  {
    {"1 $a $12ab34cd -100 $1$2",
     NULL},
    7,
    true,
    {"1", "$a", "$12ab34cd", "", "100", "$1", "$2"},
    {TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_OPERATOR, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, -1},
    {PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_SUBTRACTION, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN}
  },
  // floating point numbers
  {
    {"1.23456e-65 .1E4f 58. 4e2 1.6e-19 6.02e23f 3.14159", NULL}, 
    7,
    true,
    {"1.23456e-65", ".1E4f", "58.", "4e2", "1.6e-19", "6.02e23f", "3.14159"},
    {TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL, TOKEN_LITERAL},
    {PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN}
  },
  // string literals
  {
    {"'test' '''' 'a''b' '''a'''",
     NULL},
    4,
    true,
    {"'test'", "''''", "'a''b'", "'''a'''"},
    {TOKEN_STRING, TOKEN_STRING, TOKEN_STRING, TOKEN_STRING, -1},
    {PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN}
  },
  // char codes
  {
    {"#123 #$ff #1#2", NULL},
    4,
    true,
    {"#123", "#$ff", "#1", "#2"},
    {TOKEN_CHAR, TOKEN_CHAR, TOKEN_CHAR, TOKEN_CHAR, -1},
    {PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN, PAS_OP_UNKNOWN}
  },
  // stopping entry
  {
    {NULL}, -1, false, {""}, {-1}, {-1}
  }
};
